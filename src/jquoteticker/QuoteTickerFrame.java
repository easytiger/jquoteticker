/*
 * QuoteTickerFrame.java
 *
 * Created on 30 November 2007, 13:05
 */

package jquoteticker;


import com.wombat.mama.Mama; 
import com.wombat.mama.MamaBridge;
import com.wombat.mama.MamaDictionary;
import com.wombat.mama.MamaDictionaryCallback;
import com.wombat.mama.MamaMsg;
import com.wombat.mama.MamaQueue;
import com.wombat.mama.MamaQueueMonitorCallback;
import com.wombat.mama.MamaSource;
import com.wombat.mama.MamaSubscription;
import com.wombat.mama.MamaThrottleInstance;
import com.wombat.mama.MamaTransport;
import com.wombat.mamda.MamdaCommonFields;
import com.wombat.mamda.MamdaErrorListener;
import com.wombat.mamda.MamdaQuoteClosing;
import com.wombat.mamda.MamdaQuoteFields;
import com.wombat.mamda.MamdaQuoteGap;
import com.wombat.mamda.MamdaQuoteHandler;
import com.wombat.mamda.MamdaQuoteListener;
import com.wombat.mamda.MamdaQuoteRecap;
import com.wombat.mamda.MamdaQuoteUpdate;
import com.wombat.mamda.MamdaStaleListener;
import com.wombat.mamda.MamdaSubscription;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author  gerry
 */
public class QuoteTickerFrame extends javax.swing.JFrame {
    
    private static MamaBridge mamaBridge = null;
    private QuoteTableModel quoteTableM ;
    Vector<QuoteUpdate> symVector = null;
    private final JFileChooser fc = new JFileChooser();
    private double iniThrottle = 500;
    private int initialCount = 0;
    Thread iniMama;
    
    /** Creates new form QuoteTickerFrame */
    
    public QuoteTickerFrame() {
        initComponents();
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jpSetup = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jcmbMW = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jtxtSourceName = new javax.swing.JTextField();
        jtxtSymbolFile = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jtxtTransport = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jlblSymbolCount = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jtxtIniThrottle = new javax.swing.JTextField();
        lblInitials = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jtxtHighWM = new javax.swing.JTextField();
        jtxtLowWM = new javax.swing.JTextField();
        lblHigh = new javax.swing.JLabel();
        lblLow = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mamda Quote Ticker");
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Symbol", "bidSize", "bidPrice", "askSize", "askPrice", "Time", "sequence #"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jpSetup.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel1.setText("Middleware: ");

        jcmbMW.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "wmw", "tibrv", "lbm" }));

        jLabel2.setText("Source Name:");

        jtxtSourceName.setText("GERRY_WMW");

        jtxtSymbolFile.setText("/home/gerry/jQuoteTicker/test.sym");

        jLabel3.setText("Symbol File:");

        jLabel4.setText("Transport: ");

        jtxtTransport.setText("gerry_wmw");

        jButton2.setText("..");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Subscribe");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jlblSymbolCount.setText("Subscriptions");

        jLabel6.setText("Init Throttle: ");

        jtxtIniThrottle.setText("500");

        lblInitials.setText("Initials");

        jLabel5.setText("High WM: ");

        jLabel7.setText("Low WM: ");

        jtxtHighWM.setText("100");
        jtxtHighWM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxtHighWMActionPerformed(evt);
            }
        });

        jtxtLowWM.setText("15");

        javax.swing.GroupLayout jpSetupLayout = new javax.swing.GroupLayout(jpSetup);
        jpSetup.setLayout(jpSetupLayout);
        jpSetupLayout.setHorizontalGroup(
            jpSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpSetupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpSetupLayout.createSequentialGroup()
                        .addGroup(jpSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jpSetupLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(16, 16, 16))
                            .addGroup(jpSetupLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jpSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jtxtSourceName)
                            .addComponent(jcmbMW, 0, 213, Short.MAX_VALUE)))
                    .addGroup(jpSetupLayout.createSequentialGroup()
                        .addGroup(jpSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6))
                        .addGroup(jpSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpSetupLayout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jtxtTransport, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpSetupLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtxtIniThrottle, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(12, 12, 12)
                .addGroup(jpSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpSetupLayout.createSequentialGroup()
                        .addGroup(jpSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jpSetupLayout.createSequentialGroup()
                                .addComponent(jtxtSymbolFile, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2))
                            .addComponent(jtxtLowWM)
                            .addComponent(jtxtHighWM)))
                    .addGroup(jpSetupLayout.createSequentialGroup()
                        .addComponent(jlblSymbolCount, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblInitials, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblHigh)
                    .addComponent(lblLow)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        jpSetupLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jcmbMW, jtxtIniThrottle, jtxtSourceName, jtxtTransport});

        jpSetupLayout.setVerticalGroup(
            jpSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpSetupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jcmbMW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jtxtSymbolFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(lblHigh))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5)
                    .addComponent(jtxtHighWM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtxtSourceName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7)
                    .addComponent(jtxtLowWM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtxtTransport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jlblSymbolCount)
                        .addComponent(lblInitials)
                        .addComponent(jButton1))
                    .addGroup(jpSetupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(jtxtIniThrottle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 899, Short.MAX_VALUE)
                    .addComponent(jpSetup, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpSetup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtxtHighWMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxtHighWMActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jtxtHighWMActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            System.out.println("Open File: " + fc.getSelectedFile().getPath());
            jtxtSymbolFile.setText(fc.getSelectedFile().getPath());
        }
        
    
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
 
        try {
            
            Symbols testSym = new Symbols(jtxtSymbolFile.getText());
            symVector = testSym.loadSymsFromFile();
            
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        
        jlblSymbolCount.setText(Integer.toString(symVector.size()) + " subscriptions");
        iniThrottle = Integer.parseInt(jtxtIniThrottle.getText()); 
        
        jButton1.setEnabled(false);
        jButton2.setEnabled(false);
        jtxtSourceName.setEnabled(false);
        jtxtHighWM.setEnabled(false);
        jtxtIniThrottle.setEnabled(false);
        jtxtLowWM.setEnabled(false);
        jtxtSymbolFile.setEnabled(false);
        jtxtTransport.setEnabled(false);
        jcmbMW.setEnabled(false);
        
        quoteTableM = new QuoteTableModel(symVector);
        jTable1.setModel(quoteTableM);
        
        TableColumn symCol =  jTable1.getColumnModel().getColumn(0);
        symCol.setCellRenderer(new SymbolCellRenderer());

        iniMama = new Thread(new InitiateMamda());
        iniMama.start();
    }//GEN-LAST:event_jButton1ActionPerformed
        
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new QuoteTickerFrame().setVisible(true);
            }
        });
    }
    
    // my declarations
    DefaultTableModel symQuoteTableM = null;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox jcmbMW;
    private javax.swing.JLabel jlblSymbolCount;
    private javax.swing.JPanel jpSetup;
    private javax.swing.JTextField jtxtHighWM;
    private javax.swing.JTextField jtxtIniThrottle;
    private javax.swing.JTextField jtxtLowWM;
    private javax.swing.JTextField jtxtSourceName;
    private javax.swing.JTextField jtxtSymbolFile;
    private javax.swing.JTextField jtxtTransport;
    private javax.swing.JLabel lblHigh;
    private javax.swing.JLabel lblInitials;
    private javax.swing.JLabel lblLow;
    // End of variables declaration//GEN-END:variables
    /**
     * InQuoteTicker
     */
    public class InQuoteTicker implements MamdaQuoteHandler,
                                          MamdaErrorListener,
                                          MamdaStaleListener,
                                          MamaQueueMonitorCallback {
        
        
        @Override
        public void onQuoteRecap(   MamdaSubscription mamdaSubscription,
                                    MamdaQuoteListener mamdaQuoteListener,
                                    MamaMsg mamaMsg,
                                    MamdaQuoteRecap mamdaQuoteRecap) {
            
            quoteTableM.updateSymbolEntry(new QuoteUpdate(  mamdaSubscription.getSymbol(),
                                                            mamdaQuoteRecap.getBidSize(),
                                                            mamdaQuoteRecap.getBidPrice().getValue(),
                                                            mamdaQuoteRecap.getAskSize(),
                                                            mamdaQuoteRecap.getAskPrice().getValue(),
                                                            mamdaQuoteRecap.getEventTime().toString(),
                                                            mamaMsg.getSeqNum(),
                                                            "Initial"));

            initialCount++;
            lblInitials.setText(Integer.toString(initialCount) + " Initials");
        }
        
        @Override
        public void onQuoteUpdate(  MamdaSubscription mamdaSubscription,
                                    MamdaQuoteListener mamdaQuoteListener,
                                    MamaMsg mamaMsg,
                                    MamdaQuoteUpdate mamdaQuoteUpdate,
                                    MamdaQuoteRecap mamdaQuoteRecap) {
            
            
            quoteTableM.updateSymbolEntry(new QuoteUpdate(  mamdaSubscription.getSymbol(),
                                                            mamdaQuoteUpdate.getBidSize(),
                                                            mamdaQuoteUpdate.getBidPrice().getValue(),
                                                            mamdaQuoteUpdate.getAskSize(),
                                                            mamdaQuoteUpdate.getAskPrice().getValue(),
                                                            mamdaQuoteUpdate.getEventTime().toString(),
                                                            mamaMsg.getSeqNum(),
                                                            "Update")); 
        }
        
        
        @Override
        public void onQuoteGap( MamdaSubscription mamdaSubscription,
                                MamdaQuoteListener mamdaQuoteListener,
                                MamaMsg mamaMsg,
                                MamdaQuoteGap mamdaQuoteGap,
                                MamdaQuoteRecap mamdaQuoteRecap) {
            System.out.println("Gap!!!");
        }
        
        @Override
        public void onQuoteClosing( MamdaSubscription mamdaSubscription,
                                    MamdaQuoteListener mamdaQuoteListener,
                                    MamaMsg mamaMsg,
                                    MamdaQuoteClosing mamdaQuoteClosing,
                                    MamdaQuoteRecap mamdaQuoteRecap) {
            
            System.out.println("Quote Closing received for " + mamdaSubscription.getSymbol() );
            System.out.println("\tSequence Num:  \t\t" + mamaMsg.getSeqNum());
            
            
        }
        
        @Override
        public void onError(MamdaSubscription mamdaSubscription, short s, short s0, String string) {
            //TODO: add a special update method for STALEs
            quoteTableM.updateSymbolEntry(new QuoteUpdate(  mamdaSubscription.getSymbol(),
                                                            0,
                                                            0,
                                                            0,
                                                            0,
                                                            "",
                                                            mamdaSubscription.getSeqNum(),
                                                            "ERROR: " + string)); 
        }
        
        @Override
        public void onStale(MamdaSubscription mamdaSubscription, short s) {
            System.out.println("STALE!");
            //TODO: add a special update method for STALEs
            quoteTableM.updateSymbolEntry(new QuoteUpdate(  mamdaSubscription.getSymbol(),
                                                            0,
                                                            0,
                                                            0,
                                                            0,
                                                            "",
                                                            mamdaSubscription.getSeqNum(),
                                                            "STALE")); 
        }

        @Override
        public void onHighWatermarkExceeded(MamaQueue mamaQueue, long l) {
            String hwm = now("hh:mm:ss:SSS") + " : Exceeded High WM (" + l + ")";
            System.out.println(hwm);
            lblHigh.setText(hwm);
            
        }

        @Override
        public void onLowWatermark(MamaQueue mamaQueue, long l) {
            String lwm = now("hh:mm:ss:SSS") + " : Back under low WM (" + l + ")";
            lblLow.setText(lwm);
            System.out.println(lwm);
        }

         public  String now(String dateFormat) {
                 Calendar cal = Calendar.getInstance();
                 SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);
                 return sdf.format(cal.getTime());

  }
    }// end InQuoteTicker
    
 
    public class InitiateMamda implements Runnable {
        
        @Override
        public void run() {
            
            MamaTransport mamaTport = null;
            MamaDictionary mamaDict = null;
            
            mamaBridge = Mama.loadBridge((String)jcmbMW.getSelectedItem());
            Mama.open();
            
            mamaTport = new MamaTransport();
            mamaTport.setOutboundThrottle(MamaThrottleInstance.INITIAL_THROTTLE,iniThrottle);
            MamaQueue queue = Mama.getDefaultQueue(mamaBridge);
                        
            queue.setHighWatermark(Integer.parseInt(jtxtHighWM.getText()));
            queue.setLowWatermark(Integer.parseInt(jtxtLowWM.getText()));
            queue.setQueueMonitorCallback(new InQuoteTicker());
            
            mamaTport.create(jtxtTransport.getText(), mamaBridge);
            
            try {
                
                mamaDict = buildDataDictionary(mamaTport);
                
            } catch (InterruptedException ex) {
                ex.printStackTrace();
            }
            
            MamdaQuoteFields.setDictionary(mamaDict,null);  
            MamdaCommonFields.setDictionary(mamaDict,null);
            
            for (QuoteUpdate qu: symVector){
            
                MamdaSubscription sub = new MamdaSubscription();
                
                MamdaQuoteListener quoteListener = new MamdaQuoteListener();
                InQuoteTicker quoteTicker = new InQuoteTicker();
            
                quoteListener.addHandler(quoteTicker);
            
                sub.addMsgListener(quoteListener);
                sub.addErrorListener(quoteTicker);
                sub.addStaleListener(quoteTicker);
            
                sub.create(mamaTport, Mama.getDefaultQueue(mamaBridge), jtxtSourceName.getText(), qu.getSymbolID(), null);                
                
            }
                                  
            Mama.start(mamaBridge);
            
            synchronized (InQuoteTicker.class) {
                try {
                    InQuoteTicker.class.wait();
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
            }
            
        }//ends run
        
        
    }// ends initiate mamda
    
    // Copy + pasted from MamdaQuoteTicker
    private static MamaDictionary buildDataDictionary(MamaTransport transport)
    throws InterruptedException {
        final boolean gotDict[] = {false};
        MamaDictionaryCallback dictionaryCallback =
                new MamaDictionaryCallback() {
            @Override
            public void onTimeout() {
                System.err.println
                        ("Timed out waiting for dictionary");
                System.exit(1);
            }
            
            @Override
            public void onError(final String s) {
                System.err.println("Error getting dictionary: " + s);
                System.exit(1);
            }
            
            @Override
            public synchronized void onComplete() {
                gotDict[0] = true;
                Mama.stop(mamaBridge);
                notifyAll();
            }
        };
        
        synchronized (dictionaryCallback) {
            MamaSubscription subscription = new MamaSubscription();
            MamaSource dictSource = new MamaSource();
            dictSource.setTransport(transport);
            dictSource.setSymbolNamespace("WOMBAT");
            
            MamaDictionary   dictionary   =
                    subscription.createDictionarySubscription(
                    dictionaryCallback,
                    Mama.getDefaultQueue(mamaBridge),
                    dictSource);

            /*Mama.start() will only block for JNI*/
            Mama.start(mamaBridge);
            if (!gotDict[0]) dictionaryCallback.wait(30000);
            if (!gotDict[0]) {
                System.err.println("Timed out waiting for dictionary.");
                System.exit(0);
            }
            
            
            return dictionary;
        }
    }
}
